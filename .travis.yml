branches:
  only:
  - "/^v[0-9]/"
matrix:
  fast_finish: true
  include:
  - os: linux
    dist: trusty
    language: shell
    sudo: required
    services:
    - docker
    install:
    - docker pull octoblu/meshblu-connector-builder:linux-armv7
    script:
    - |
      docker run --rm --volume $PWD:/work \
        --env TRAVIS_REPO_SLUG=$TRAVIS_REPO_SLUG \
        --env TRAVIS_BRANCH=$TRAVIS_BRANCH \
        --env MESHBLU_CONNECTOR_UPLOADER_GITHUB_TOKEN=$MESHBLU_CONNECTOR_UPLOADER_GITHUB_TOKEN \
        --env AWS_REGION=$AWS_REGION \
        --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
        --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
        --env MESHBLU_CONNECTOR_ENCRYPTION_PASSWORD=$MESHBLU_CONNECTOR_ENCRYPTION_PASSWORD \
        --env MESHBLU_CONNECTOR_CERT_PASSWORD=$MESHBLU_CONNECTOR_CERT_PASSWORD \
        octoblu/meshblu-connector-builder:linux-armv7 \
          bash -c 'export HOME=/tmp/cache \
            && meshblu-connector-pkger \
            && meshblu-connector-installer-debian --destination-path=/usr/share/meshblu-connectors/configurators/no-config \
            && meshblu-connector-uploader-github \
            && upload-deb-s3 \
          '
  - os: linux
    dist: trusty
    language: shell
    sudo: required
    services:
    - docker
    install:
    - docker pull octoblu/meshblu-connector-builder:linux-x86
    script:
    - |
      docker run --rm --volume $PWD:/work \
        --env TRAVIS_REPO_SLUG=$TRAVIS_REPO_SLUG \
        --env TRAVIS_BRANCH=$TRAVIS_BRANCH \
        --env MESHBLU_CONNECTOR_UPLOADER_GITHUB_TOKEN=$MESHBLU_CONNECTOR_UPLOADER_GITHUB_TOKEN \
        --env AWS_REGION=$AWS_REGION \
        --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
        --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
        --env MESHBLU_CONNECTOR_ENCRYPTION_PASSWORD=$MESHBLU_CONNECTOR_ENCRYPTION_PASSWORD \
        --env MESHBLU_CONNECTOR_CERT_PASSWORD=$MESHBLU_CONNECTOR_CERT_PASSWORD \
        octoblu/meshblu-connector-builder:linux-x86 \
          bash -c 'export HOME=/tmp/cache \
            && meshblu-connector-pkger \
            && meshblu-connector-installer-debian --destination-path=/usr/share/meshblu-connectors/configurators/no-config \
            && meshblu-connector-uploader-github \
            && upload-deb-s3 \
          '
  - os: linux
    dist: trusty
    language: shell
    sudo: required
    services:
    - docker
    install:
    - docker pull octoblu/meshblu-connector-builder:linux-x64
    script:
    - |
      docker run --rm --volume $PWD:/work \
        --env TRAVIS_REPO_SLUG=$TRAVIS_REPO_SLUG \
        --env TRAVIS_BRANCH=$TRAVIS_BRANCH \
        --env MESHBLU_CONNECTOR_UPLOADER_GITHUB_TOKEN=$MESHBLU_CONNECTOR_UPLOADER_GITHUB_TOKEN \
        --env AWS_REGION=$AWS_REGION \
        --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
        --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
        --env MESHBLU_CONNECTOR_ENCRYPTION_PASSWORD=$MESHBLU_CONNECTOR_ENCRYPTION_PASSWORD \
        --env MESHBLU_CONNECTOR_CERT_PASSWORD=$MESHBLU_CONNECTOR_CERT_PASSWORD \
        octoblu/meshblu-connector-builder:linux-x64 \
          bash -c 'export HOME=/tmp/cache \
            && meshblu-connector-pkger \
            && meshblu-connector-installer-debian --destination-path=/usr/share/meshblu-connectors/configurators/no-config \
            && meshblu-connector-uploader-github \
            && upload-deb-s3 \
          '
  - os: osx
    node_js: '8'
    language: node_js
    after_success:
    - yarn global add meshblu-connector-pkger meshblu-connector-installer-macos meshblu-connector-uploader-github
    - |
      meshblu-connector-pkger \
      && meshblu-connector-installer-macos --destination-path=/Library/MeshbluConnectors/configurators/no-config \
      && meshblu-connector-uploader-github
env:
  global:
  - secure: eSTRqfdhKhAkJxmo1XonPfJtRxwSrFQC0YHDXXW+2QSdE/wzmZCnskK896HqJkVFkMzTZufephbDpCmo4/fOu+XytLsAoeVLwoRoGyD7zG/69mN7vtLGbVKtc7fB6XMWCJTb8qE103H6nofgieSWMn+ihUUHWiq70cUPqWIhhQFyJcdMnz2mY9/yI3+2g3sJzujBdAjc0trQfIRQlus2y9k3OIKzGs70fBXLBRtyn5lSY1sbEn7iEEn0hZiyCbJWGubEn+cnRR0pESDJBwgEvLP+g1BeA6NmngtcaQznQA7JCn4+gozBecafU2SO9nGyOiSfGh4SPsYFEkhKyjfzzDdLGy6G1dMj9hwb8Vm0du4tmggw+PFxRskzbWpQUa2lI6lLpz7ypm3yaIuDzr5bRMbaMVNl2bnZ37VGyo+wpFNyb3OPoh2J9/4YZx/S9pElRBx9wk54KnMhBZkUUmdkZsxqx/HrMn37YyhHW0muOlQe0Dyxuz3awJPYkeFyOat7+VyBdBp4QOmBskcbzl2rA5SmGeWDrl6ePh+S31dfjNXzIapeuryPdATdw9Pr/oUEDh0BCqwwHTXG8BOZMCRUH45jyHWxarYwjOlMTXNQuPV+swBzf23bXdXQ9LZmJbndj98CGyD/sPrpC/YBbc+vrZrqL8iSQwgO7EijYmUY9WI=
  - secure: sqVBGRGRdnjuWCoXjL5+kYg3/AihS1R5kbHwB7vArH4n2j0puRAxebVzMNgG/pHD/sS6P25aJw0+Now92HhaTOjGIy7Tr3M+A61xqDuIj/L7TxA9GVPJEX5Fh5oDtMKo1EjmPQoYgrX5PXD1tAmeHPeR2JbTcWKEm73u7zKVu3aKGnfN6fcmFRH9bHSEoSnD7pIxV9Wees89v77+I8T5mxgtdkdmEEow55+SpO3Q47ACPdWuDTWwTGSkMBj7fiuYDtuNHDShUaxUkQjU6ssERcpQOUcJMi352S6hkDNvyUQ2QExDRYsJhfQRRkJVX8mdCsBLNW36Qhiu+QPXSxyp0R8zgXmH9jO4GEFt2MGnc0bduIpb7c6h7x/umo852IUa1jQn7YTTAgTyd5/FaGkkr4RO7Ff4Lv8h0crxEQ3t5DUcUUMk2JLdtBnoOdG5CXn9IjJVECQGQvtSNMLwtnKKV9V8BVnYrGpoCXDzIDwMr2H2qlBDjh1tFb5Co8D0uoGgWHGmEDMzKm/tbA4bf8CRLp6FxcpGmc/uFiUwbVGMoYYBb9hiRXtfPGSmkfZVEg5yaj7eU54stQJ03wQnGH/C89pSF+AiwWYUXFoGAKN99t02cXfM+ZNIXdG7i/smD/ghwzMB1y76kQgm50m0H/ffEtfbKBZdq98ohCeItZylwDw=
  - secure: GKUpP9NrbkD7as06w4qI1lJCuny+DXYW40IQ2/7OaTpSm6lVq/wQ3kXh9jOhA5XRbH4kn5EcRllRwdJOet8JUuwDPyzWsc16FZV49rg/VuEdCMH5JjcBvH3M4Y/x+6kbkch64Smqi4JOUsfRV/s4VpBFn7ktUrkhEkIG9pMR0FVvLnS39Mgk1TQrN6630btKaaGRNqq/pWR1QdJ7DV+ZcrHKiTnWQ6iCJkgPL7oBhLcdXtxbxzBeIfmnUKjIX5Z/vJnia0PYlk1YOB7I57ypQEoTpS6/8WPMQc9iHTO1uIViXoD9XD9KpHyEaxPx37v3AENQeIFb6A7rw4ebnxbaWhUjgO2TY7sOfDglhiQSuIsUtSgLr2U2935SVf26EbLniH5QjKKqf37oMnn76Uy8+GPs2qAX0/iuAY30Y/vXsI0eMBiR0ALX5f5H3b9Gu6j0XTZxVUu3RnWKXtFavMu8f2Iplye8CuDVMLQCuzga+Jh5zn8wnhoYA5sAQI1a1D2Ko+jjzzQ4cKgiYv0cKixu8/ZlEwS/qfUPIOJ+qBa7pHg1Zru1vntIpkxe6HV9aDCT3Zs1geiMKvKAFloMsPQdr/lg0SAPStUWHX0ssmt0RekFMo3i1sHmRjyys4+QZ2jIJqoXTGdH+QcamUgZWBViorZeJYsXb5oYu29ScSfUnHM=
  - secure: Lb9ryQGvd1Trd5GbIUhzmGvlsVMGLPXYOyCdg5ByX4PJ+2UpUaeJolnPRSdJr5w8Po2tbA994+4x7AHPvRQJaDDTJkQiTtw1aLaOni8xtyIOYcAOVrS2YwSkWcFeUh7lWiNlZ1W1SZxlSMJHyPrjsxGqQpxgEOyMWtdqpqS+++b3Bvzu6mTbG9rQWnBzcJTwbv5VE+9SLNjYElMEcxCjIn4V76Z+kIX8dNxMSYAK11TY9vSHEsJjw7O7rxIrla0KsP1Ppgf32WOLQk2ZKhPRyGlUwuoALIg5zCOmb5xMYUpMUaSHeeFeK/j1U8ieHmexx9RVh7XPZdkyyoH1sqR/rVtQRb4P+EOppKUB/gMUTpU42+ckWdOIcOOxAJ4wbiNBqvvh8EqiNq1KAYy0uBC5xNUbt63L9AVHe5BxPkJjWGij1qUWhtXgV1DNgDcXR5Pq9x3AOGfZPKzX6kOcfhiJaEhFvxgr1yNYMfFsCtBlp8RAs/tEFjGC45BP1I0/iDZEAtgRWJi0XOYu2Whs/No1N4XIJ59JjA2tVne41MQyQb+/X9SCj5NcphzZ5FfJV+k6Y9I2BO/Yd9GRCJDoiSglMqCMj2k5ymDKprj/vs5UdfJronDCcCB309FXtID2EQ7fzw1o+lwoPUuuR1ugQko0J4hZGmI56xjMQhEM7Yw3sbs=
  - secure: LnvFynQ3oy3LqIppxr5M9/kMhylXmy0GvL7R3L7v0Hge/XN70LrV7R3V3DfQ7F8ZfpuWp+JSUKpqj+n77G0ugqGDBbkV6Lsxm/QhVcmE1WGff4t9yLkm5Kk30dmzzTb5rMEpd/lQrh1/xWmXYg+YbH3faBWs5LRr8b1jgiD2NOPVdWYNMVfRtaxNy0e5190wczG4+R8zJUQTtu0GMT74xnROOaLLMyyh3JJyMHKum6BvmfQgsWSjleudeHWESdxqN0nbP6qpj+MILo+5f4H34hEPClCfk6XRZsGzdwu55YzTu+I/3dllv2TmBQz9sG12/kCFlmjQKv/Qht+BC1rxXKCAB3w2CJ8lUG9ZOm+pS1LJsLpBoLvEFzjAjQlemVVg82RgboPU0tMtDZ1892Uk3fW5ktjSxisviM5VpGzAgXsMBORKUk8CTafRoLy3htEpZsEngms5d63Ys9Qcmc3PUWaiKNY+nIRgClgbIEcI3YHk/xyVb2Wnk7/zzLmvjhEbmqeCdwhH/i0SEDmGDrtdGrnfyFgIyBZKTmOefFvS6f5A2tUEdhIfPCugtPGG+yzC5oYW9/OxHdM0EPceReAWu2wY/BTAx+FOYIWz/5ctB3d9U98wAXF/KStgwVBfgnDQPPGZn95DigP0rNSQkcQmYH46MrPc2kk2c4evM9BnNRE=
  - secure: s0bDdin+1IPuiXP3YdurRjrGdX6j0XwjvaNKypFpzfORDUFABu/CfUJLr5O6TV4MjPjKO0/CLLLoCY4BjayEQmWD30LYtk+e+dP4b2GEl7/n1oGdFwr3aFZP8UKSWMjI58Z1dhP67/fTmE5vDCWfTIRrmhv0gtixv4bPwfeSh9d1g7X1SgDCy8izY7BLJ6ryeLL8cZQTAObML/ue0Gq9rRftolm4mQ2NvuAYv52qdm2lLcYF5OKAf1AId6qt4Cpdaegr0CCW+TWzHiHu4OdXqH4lxV0O9I0TEotacy1/23xNsPWPbbN+tSPRrACZtBftx+DxWmBhxs/BzOSeUFF+WBJkZJCkn7NmmTJ9KN5lR2Bx+kATuU02I1VaLkx9USiFrP4V2Wr845dGu9aVItHwpoHW1QHOjGfQEn58zjewAA9JPyFoKFVUzobnoOSMgHd3z1VHEv807cfDXEhA21yTfByNRl120ECt5lFSzTVhxpweoje/OnKTM+OZzvkZRu4jV1TB63MlsSQoTH0JRdUeg47EQKxqufnORHk6i93UOJYhIGKdwRzf7F36IU70SjmmDjnwh6m4jm63umtKWGZE44LCmPt3SVCZ05P8412r/+eGspFo/e/MH2E3AqYmy0T3BZhf0oZpBu6OiwD2j+am3m6K2vKLUFkXzAWNwfUAP5k=
  - secure: Gm8C6lnxa7RqA8NxR+nQWEIHHLhlRiM+tMpelVG7lw8iB61wjyzjkyB16fqaOOprmL2GBCczt7a7yEqQLtrdXAB4GiqIEGN6EsgI5TmQagGaQym4V4+woG+1/cVRLOf62SRWaJau+Q+ip5Li/X5IxfIpfzlbHtUYA+a6CHPGN99vaelwc1wNDnWJtHKaSvvDMqJPYmiYaP0WrlaGBYaN0DArA3PyS7rdoLgvok1IdczUrc+fK+20rUyLJ/yx/P6k7+zRoYCYgE0QG4HJmpgd2NUNiXTKagYlr/wX9gQUpL4t0pf9bnprcEKCPDZV9PfQjfDNmwGipwh9W0AYMXGT1f7wILYf7dG32xIs6gZ5ctBgmveC5YdEwLjoTC2Fj9rAEeGUiGXxBd8NGQHAOI96hf7WzhKWehFgW6wLPEpGo6lCyqMSrBKkzeygSipX+GRUAF2P/PyjMuusKKAjJwVGZOWmBy9kFfmwkR57czdNrfi5lpSN2Mo53aP/3T1+VRD9j7bnk8qMiW1L4RT5vOJY9PfJMihgYN064B8t2liDeYpKbHlb6UKHLluUmTohHADogxvG3pDpnkNvRRcDfmeJE+4dDGOsnXoTLqOcaGamw8a1D1fNil+3jHplHypFyfOFu7JUblWFmWgtp4S/Z0MUhUch9zkrxPAWhCpc4bEgDqE=
  - secure: aT+0jtFtln+/buAPACfjr4Ys2Bih8+qK5HPwRY6Dkzox9B70J555sCI8arAZlOobhkazn1qGXZuGtqlBOgRZWqLdnMu0rfTd0kLLcJCK6mJVQtuVWXozwjNasgJpAB1G8RfWUEckTrFMnlZMVKuG5uK0n2/N4Kwedc7TMIEzDmRIm17Z7QwmXpNXLejwRbugiKV30Wvk7dtIOBG//rMAjw7a7wOsRedYUfNmhYqJlJ5z1jqIzlGBDKFcn7pZU6ZrUQGm7pZufoommAs5mEUVnSkBfOgJsa2s+D5W/WAtxdERBPptl3LtDQuzlVPL2dQCdcotlwhuZPUWxtTiOj+uz4BpgwfDLvaFcbnPeqQY8QkKyAWEBrTBVJM9e8JwEWlaImtZBM4LCOgWcqLmFDmM0NG6gNk+FjwmZ+0fsV3b6LDn9NMg3UrJULDGGbwdYZDfrtd43xgD0Vu+FrukeFnE0IP757vBp5utEjW37QAvCUscshcoweNyTUgG0NMIbiPsD//cu50rdsy2AuLdWeGD8jGDnGcmcYorx/LA2Fnf+zwYdhk0/xreY0JekMsZ84gGMrLuAvCqqqAmIazKncSgYp7YG7V8h5O9Xh+UCdYydgQPPWNW2ic4qOWHjH3gfMdm8XAJbtXkL9I4ry0WGrAkwI3H1ifgkBezzUop0hMaFeA=
